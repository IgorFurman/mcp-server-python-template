{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "üöÄ SETUP: Complete Development Environment",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Setup: Python Virtual Environment",
                "Setup: Install Dependencies",
                "Setup: Initialize Database",
                "Setup: Validate Configuration"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false
            }
        },
        {
            "label": "Setup: Python Virtual Environment",
            "type": "shell",
            "command": "python",
            "args": [
                "-m",
                "venv",
                ".venv"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": []
        },
        {
            "label": "Setup: Install Dependencies",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && pip install -e . && pip install pytest pytest-asyncio httpx watchdog psutil"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "dependsOn": "Setup: Python Virtual Environment"
        },
        {
            "label": "Setup: Initialize Database",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python populate_prompt_database.py"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "dependsOn": "Setup: Install Dependencies"
        },
        {
            "label": "Setup: Validate Configuration",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"from config_loader import load_config; print('‚úÖ Configuration valid');\""
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "dependsOn": "Setup: Initialize Database"
        },
        {
            "label": "‚ö° Sequential-Think: Start Server (stdio)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python sequential_think_mcp_server.py --transport stdio"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}",
                "env": {
                    "PYTHONPATH": "${workspaceFolder}",
                    "SEQUENTIAL_THINK_ENV": "development"
                }
            },
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "^ERROR:(.*)$",
                    "file": 1,
                    "message": 1
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Starting Sequential Think MCP Server",
                    "endsPattern": "Server ready"
                }
            }
        },
        {
            "label": "üåê Sequential-Think: Start Server (SSE Web)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python sequential_think_mcp_server.py --transport sse --host 0.0.0.0 --port 7071"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}",
                "env": {
                    "PYTHONPATH": "${workspaceFolder}",
                    "SEQUENTIAL_THINK_ENV": "development"
                }
            },
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "^ERROR:(.*)$",
                    "file": 1,
                    "message": 1
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Starting Sequential Think MCP Server",
                    "endsPattern": "Server ready.*7071"
                }
            }
        },
        {
            "label": "üîÑ Development: Auto-restart Server",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import time; import subprocess; import os; from watchdog.observers import Observer; from watchdog.events import FileSystemEventHandler; class RestartHandler(FileSystemEventHandler): def __init__(self): self.process = None; self.restart(); def on_modified(self, event): if event.src_path.endswith('.py'): print(f'File changed: {event.src_path}'); self.restart(); def restart(self): if self.process: self.process.terminate(); self.process = subprocess.Popen(['python', 'sequential_think_mcp_server.py', '--transport', 'stdio']); print('Server restarted'); handler = RestartHandler(); observer = Observer(); observer.schedule(handler, '.', recursive=True); observer.start(); time.sleep(3600)\""
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "isBackground": true
        },
        {
            "label": "üß™ TEST: Full Test Suite",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Test: Unit Tests",
                "Test: Integration Tests",
                "Test: Database Operations",
                "Test: AI Services"
            ],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "Test: Unit Tests",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -m pytest tests/ -v --tb=short"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^(.*):(\\d+): (FAILED|ERROR) (.*)$",
                    "file": 1,
                    "line": 2,
                    "severity": 3,
                    "message": 4
                }
            }
        },
        {
            "label": "Test: Integration Tests",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import asyncio; from sequential_think_mcp_server import test_server_health; asyncio.run(test_server_health())\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Test: Database Operations",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"from core_utils import DatabasePool; db = DatabasePool('sequential_think_prompts.db'); print('‚úÖ Database connection successful')\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Test: AI Services",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"from config_loader import load_config; config = load_config(); print('‚úÖ AI services configuration loaded')\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîÑ Database: Sync Prompt Data",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python sync_prompt_data.py --force-sync"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üìä Database: Get Statistics",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import asyncio; import json; from sequential_think_mcp_server import EnhancedDatabaseManager; async def stats(): db = EnhancedDatabaseManager('sequential_think_prompts.db'); result = await db.get_database_stats(); print(json.dumps(result, indent=2)); asyncio.run(stats())\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîç Database: Search Prompts Interactive",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "read -p 'Enter search query: ' query && source .venv/bin/activate && python -c \"import asyncio; import sys; from sequential_think_mcp_server import EnhancedDatabaseManager; async def search(): db = EnhancedDatabaseManager('sequential_think_prompts.db'); results = await db.search_prompts('$query'); print(f'Found {len(results)} results:'); [print(f'- {r[\\\"title\\\"]} (Quality: {r[\\\"quality_score\\\"]})') for r in results[:10]]; asyncio.run(search())\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "ü§ñ AI: Test Prompt Enhancement",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "read -p 'Enter prompt to enhance: ' prompt && source .venv/bin/activate && python -c \"import asyncio; from sequential_think_mcp_server import EnhancedAIServiceManager; async def enhance(): ai = EnhancedAIServiceManager(); result = await ai.enhance_prompt('$prompt'); print('Enhanced:', result); asyncio.run(enhance())\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîß Dev: Watch Configuration Changes",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import time; from watchdog.observers import Observer; from watchdog.events import FileSystemEventHandler; class ConfigHandler(FileSystemEventHandler): def on_modified(self, event): print(f'Config changed: {event.src_path}'); observer = Observer(); observer.schedule(ConfigHandler(), '.', recursive=True); observer.start(); print('Watching for config changes...'); time.sleep(3600)\""
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "isBackground": true
        },
        {
            "label": "üìù Config: Edit Configuration",
            "type": "shell",
            "command": "code",
            "args": [
                "${workspaceFolder}/config.yaml"
            ],
            "group": "build",
            "presentation": {
                "echo": false,
                "reveal": "never"
            }
        },
        {
            "label": "üîí Config: Validate Environment",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import os; keys=['OPENAI_API_KEY', 'DEEPSEEK_API_KEY']; [print(f'{k}: {'‚úÖ Set' if os.getenv(k) else '‚ùå Missing'}') for k in keys]\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üì¶ Deploy: Create Distribution Package",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python setup.py sdist bdist_wheel"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üöÄ Deploy: Install Globally",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && pip install -e . && echo 'Sequential Think MCP Server installed globally'"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîß Debug: Server Health Check",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && timeout 10s python sequential_think_mcp_server.py --transport stdio < /dev/null || echo 'Server startup test complete'"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üìä Monitor: Performance Metrics",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "source .venv/bin/activate && python -c \"import psutil; import os; print(f'CPU: {psutil.cpu_percent()}%'); print(f'Memory: {psutil.virtual_memory().percent}%'); print(f'Disk: {psutil.disk_usage(os.getcwd()).percent}%')\""
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üßπ Maintenance: Clean Build Artifacts",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "rm -rf build/ dist/ *.egg-info/ __pycache__/ .pytest_cache/ && echo 'Build artifacts cleaned'"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üìã Logs: View Server Logs",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "tail -f logs/sequential_think_mcp.log 2>/dev/null || echo 'No log file found. Start server to generate logs.'"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "dedicated"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "isBackground": true
        },
        {
            "label": "üèóÔ∏è CI: Complete Build Pipeline",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Test: Unit Tests",
                "Test: Database Operations",
                "üßπ Maintenance: Clean Build Artifacts",
                "üì¶ Deploy: Create Distribution Package"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üì§ Export: Generate MCP Config",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo '{\"mcpServers\":{\"sequential-think-mcp\":{\"command\":\"python\",\"args\":[\"'$(pwd)'/sequential_think_mcp_server.py\"],\"cwd\":\"'$(pwd)'\",\"env\":{\"PATH\":\"'$(pwd)'/.venv/bin:/usr/bin:/bin\"}}}}' | python -m json.tool > claude_desktop_config.json && echo 'MCP config exported to claude_desktop_config.json'"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        }
    ]
}